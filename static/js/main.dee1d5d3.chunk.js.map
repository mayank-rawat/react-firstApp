{"version":3,"sources":["components/Navbar.js","components/TextForms.js","components/Alerts.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","href","aboutText","onClick","toggleMode","role","htmlFor","TextForms","useState","text","setText","search","searchText","beforSearch","afterSearch","style","color","heading","backgroundColor","value","onChange","event","target","rows","placeholder","newText","toUpperCase","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","showAlert","pos","length","charAt","found","i","temp","itemID","count","WordCount","Alerts","alert","message","prototype","PropTypes","string","isRequired","defaultProps","App","setMode","setAlert","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.dee1d5d3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div>\r\n      <nav className= {`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" to=\"#\">\r\n            {props.title}\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                  Home\r\n                </a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"#\">\r\n                  {props.aboutText}\r\n                </a>\r\n              </li>\r\n            </ul>\r\n            <div className={`form-check form-switch text-${props.mode === 'light'? 'dark' : 'light'}`}>\r\n            {/* <button className = \"mode mx-1 first\" itemID = \"first\" onClick ={()=>{props.handleMode('rgb(255, 255, 255)')}} ></button>\r\n              <button className = \"mode mx-1 second\" itemID = \"second\" onClick ={()=>{props.handleMode('rgb(32, 68, 68)')}}></button>\r\n              <button className = \"mode mx-1 third\" itemID = \"third\" onClick ={()=>{props.handleMode('rgb(16, 14, 91)')}}></button>\r\n              <button className = \"mode mx-1 forth\" itemID = \"forth\" onClick ={()=>{props.handleMode('rgb(184, 218, 210)')}}></button>\r\n               */}\r\n              <input className=\"form-check-input\" type=\"checkbox\" onClick = {props.toggleMode} role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n              <label className=\"form-check-label mx-2\" htmlFor=\"flexSwitchCheckDefault\">Change Mode</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nNavbar.prototype = { title: PropTypes.string.isRequired, aboutText: PropTypes.string };\r\nNavbar.defaultProps = {title: \"Title here\", aboutText: \"About us here\"}; ","import React, {useState} from 'react'\r\n\r\nexport default function TextForms(props) {\r\n    const [text, setText] = useState(\"\");\r\n    const [search, searchText] = useState(\"\");\r\n    const [beforSearch, afterSearch] = useState(\"\");\r\n\r\n    const handleOnChange = (event)=>{\r\n        setText(event.target.value);\r\n    }\r\n    const handleUpclick = ()=>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n    }\r\n    const handleLoclick = ()=>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n    }\r\n    const handleCopyText = ()=>{\r\n        let text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"success\",\"Text copied to clipboard.\");\r\n\r\n    }\r\n    function WordCount(text){\r\n        let i = 0;\r\n        let count = 0;\r\n        while(i < text.length){\r\n            if(text.charAt(i) === ' ' && text.charAt(i+1) !== ' '){\r\n                count++;\r\n            }  \r\n            i++;  \r\n        }\r\n        return count;\r\n    }\r\n    const searchWord = ()=>{\r\n        let pos = 0;\r\n        while(pos < text.length){\r\n            if(search.charAt(0) === text.charAt(pos)){\r\n                let found = true;\r\n                let i = 0;\r\n                let temp = pos;\r\n                while(i < search.length){\r\n                    if(search.charAt(i) !== text.charAt(temp)){\r\n                        afterSearch(search + \" not found.\");\r\n                        found = false;\r\n                        break;\r\n                    }\r\n                    i++;\r\n                    temp++;\r\n                }\r\n                if(found){\r\n                    afterSearch(search + \" found at position \" + pos);\r\n                    break;\r\n                }\r\n                    \r\n            }\r\n            pos++;\r\n        }\r\n        \r\n    }\r\n    const searchOnChange = (event)=>{\r\n        searchText(event.target.value);\r\n    }\r\n    return (\r\n        <>\r\n        <div style = {{color:props.mode ==='dark'? 'white':'rgb(24 39 57)'}}>\r\n            <div className = \"container\">\r\n                <div className = 'my-3'></div>\r\n                <h1>{props.heading}</h1>\r\n                <div className = \"mb-3\">\r\n                    <textarea className = \"form-control\" style = {{backgroundColor : props.mode ==='dark'? 'rgb(24 39 57)':'white', \r\n                    color:props.mode ==='dark'? 'white':'rgb(24 39 57)'}} value={text} onChange={handleOnChange} id=\"myBox\" rows=\"8\" placeholder = \"Enter text here\"></textarea>\r\n                    <div className = 'my-2 d-flex'>\r\n                        <button className = \"btn btn-primary\" onClick = {handleUpclick}>Convert to Uppercase</button>\r\n                        <button className = \"btn btn-primary mx-2\" onClick = {handleLoclick}>Convert to Lowercase</button>\r\n                        <button className = \"btn btn-primary mx-2\" onClick = {handleCopyText}>Copy Text</button>\r\n                        <input className=\"form-control me-2\" type=\"search\" value={search} onChange = {searchOnChange} placeholder=\"Search\" aria-label=\"Search\"/>\r\n                        <button className=\"btn btn-outline-success\" type = \"submit\" onClick = {searchWord}>Search</button>\r\n                    </div>\r\n                    <p itemID = \"search\">{beforSearch}</p>\r\n                </div>\r\n            </div>\r\n            <div className = \"container\">\r\n                <h2>Your text summary</h2>\r\n                <p>{WordCount(text)} words and {text.length} characters</p>\r\n                <h2>Preview</h2>\r\n                <p>{(text.length === 0)? \"Enter text to preview.\" : text}</p>\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alerts(props) {\r\n    return (\r\n            props.alert &&\r\n            <div className = {`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{props.alert.type}</strong>: {props.alert.message}\r\n            </div>\r\n    )\r\n}\r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForms from './components/TextForms';\nimport React, {useState} from 'react'\nimport Alerts from './components/Alerts';\nimport About from './components/About';\n// import { BrowserRouter as Router, Switch , Route} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n  const showAlert = (type, message)=>{\n      setAlert({\n        type: type,\n        message: message\n      })\n      setTimeout (()=>{\n        setAlert(null);\n      },1500);\n  }\n  const toggleMode = ()=>{\n      if(mode === 'light'){\n        setMode('dark');\n        document.body.style.backgroundColor = 'rgb(24 39 57)';\n        showAlert(\"success\",\"Dark mode has been enabled.\");\n      }\n      else{\n        setMode('light');\n        document.body.style.backgroundColor = 'white';\n        showAlert(\"success\",\"Light mode has been enabled.\");\n      }\n  }\n  // const cls = \"light\";\n  // const handleMode = (cls)=>{\n  //   console.log(cls);\n  // }\n  return (\n    <>\n    {/* <Router> */}\n      <Navbar title = \"Text Utils\" aboutText = \"About Us\" mode = {mode} toggleMode = {toggleMode}/>\n      <Alerts alert = {alert}/>\n      {/* <Switch>\n          <Route exact path=\"/About\">\n            <About /> \n          </Route>\n          <Route exact path=\"/\">  */}\n          <TextForms to=\"/\" showAlert={showAlert} heading=\"welcome to  text converter, Enter your text\" mode={mode} /> \n          {/* </Route>\n      </Switch>\n    </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}